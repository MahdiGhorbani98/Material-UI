{"version":3,"sources":["components/Home.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["useStyle","makeStyles","themeStyles","root","appBar","boxShadow","menuButton","marginLeft","spacing","title","flexGrow","userSelect","gridContainer","marginTop","Home","props","notes","useState","lightTheme","setLightTheme","anchor","setAnchore","toggleDrawer","open","event","type","key","theme","React","useMemo","createTheme","palette","primary","main","blue","secondary","classes","menuList","List","style","width","map","text","index","ListItem","button","ListItemIcon","ListItemText","ThemeProvider","CssBaseline","Drawer","onClose","Divider","AppBar","Toolbar","IconButton","onClick","edge","color","Typography","className","variant","Button","Container","breakpointCols","default","columnClassName","note","Card","CardHeader","cardHeader","avatar","Avatar","backgroundColor","Math","floor","random","toString","charAt","action","MoreVert","CardContent","details","CardActions","Favorite","Share","id","App","setNotes","useEffect","Axios","get","then","res","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e538c5a.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar  from '@material-ui/core/AppBar'\r\nimport Toolbar  from '@material-ui/core/Toolbar'\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles , createTheme, ThemeProvider ,withStyles, createMuiTheme} from '@material-ui/core/styles';\r\nimport { Avatar, CardActions, CardContent, CardHeader, Container, Typography } from '@material-ui/core';\r\nimport {  blue  } from '@material-ui/core/colors';\r\nimport Brightness4OutlinedIcon from '@material-ui/icons/Brightness4Outlined';\r\nimport BrightnessHighIcon from '@material-ui/icons/BrightnessHigh';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Favorite, MoreVert, Share } from '@material-ui/icons';\r\nimport Masonry from 'react-masonry-css';\r\nimport { useState } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail'\r\n\r\n\r\n\r\nconst useStyle = makeStyles((themeStyles)=> ({\r\n   \r\n\r\n    root:{\r\n\r\n    },\r\n    appBar:{\r\n        boxShadow:1\r\n    },\r\n    menuButton : {\r\n        marginLeft : themeStyles.spacing(1)\r\n    },\r\n    title:{\r\n        flexGrow : 1,\r\n        userSelect:'none',\r\n        marginLeft : themeStyles.spacing(2)\r\n\r\n    },\r\n    gridContainer :{\r\n        marginTop:themeStyles.spacing(12),\r\n    }\r\n}))\r\n\r\n\r\nexport default function Home(props) {\r\n    const notes = props.notes;\r\n    const [lightTheme,setLightTheme] = useState(true);\r\n    const [anchor,setAnchore] = useState(false);\r\n\r\n    const toggleDrawer = ( open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n          return;\r\n        }\r\n        setAnchore(open)\r\n    }\r\n    const changeTheme= ()=>{\r\n        setLightTheme(!lightTheme)\r\n    }\r\n\r\n    const theme = React.useMemo(\r\n        ()=> createTheme({\r\n            palette:{\r\n                type :lightTheme?'light':'dark',\r\n                primary:{\r\n                    main: lightTheme? blue[500] : '#26a69a',\r\n                },\r\n                secondary: {\r\n                    main: lightTheme?'#f50057' :'#ff5722' \r\n                }\r\n                \r\n                \r\n            }\r\n        }),[lightTheme]\r\n    )\r\n\r\n\r\n    const classes = useStyle();\r\n    const breakpointCols = {\r\n        default:3,\r\n        1100:2,\r\n        700:1\r\n    }\r\n\r\n    const menuList = ()=>(\r\n                    <List style={{width:250}}>\r\n            {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n            </ListItem>\r\n            ))}\r\n        </List>\r\n    )\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme = {theme}>\r\n            <CssBaseline />\r\n                <Drawer anchor={'left'} open={anchor} onClose={toggleDrawer(false)}>\r\n                    {menuList()}\r\n                    <Divider />\r\n                    {menuList()}\r\n\r\n                </Drawer>\r\n                <AppBar  >\r\n                    <Toolbar>\r\n                        \r\n                        <IconButton onClick={toggleDrawer(true)} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n\r\n                        <Typography className={classes.title} variant=\"h6\" >\r\n                            Material-UI\r\n                        </Typography>\r\n\r\n                        <IconButton onClick={changeTheme} color=\"inherit\">\r\n                            {lightTheme? <Brightness4OutlinedIcon/> : <BrightnessHighIcon/>}\r\n                        </IconButton>\r\n\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n            </AppBar>\r\n            <Container  className={classes.gridContainer}>\r\n                <Masonry\r\n                  breakpointCols={breakpointCols}\r\n                  className=\"my-masonry-grid\"\r\n                  columnClassName=\"my-masonry-grid_column\"\r\n                >\r\n                    {\r\n                        notes.map(note=> (\r\n                                <Card className={classes.root} key ={note.id}>\r\n                                    <CardHeader className={classes.cardHeader}\r\n                                    avatar ={\r\n                                        <Avatar style={{backgroundColor: '#'+Math.floor(Math.random()*16777215).toString(16) }} >\r\n                                            {note.title.charAt(0)}\r\n                                        </Avatar>\r\n                                    }\r\n                                    action={\r\n                                        <IconButton>\r\n                                            <MoreVert/>\r\n                                        </IconButton>\r\n                                    }\r\n                                    title={note.title} />\r\n                                    <Divider/>\r\n                                    <CardContent>\r\n                                        <Typography variant='body2' color='textSecondary'>\r\n                                            {note.details}\r\n                                        </Typography>\r\n                                    </CardContent> \r\n                                    <CardActions>\r\n                                        <IconButton color='secondary' aria-label=\"add to favorites\">\r\n                                            <Favorite />\r\n                                        </IconButton>\r\n\r\n                                        <IconButton>\r\n                                            <Share/>\r\n                                        </IconButton>\r\n                                    </CardActions>\r\n                                </Card>\r\n                        ))\r\n                    }\r\n                </Masonry>\r\n            </Container>\r\n\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n","import Home from \"./Home\";\nimport '../css/Home.css';\nimport {useEffect,useState} from 'react';\nimport Axios from 'axios'\nimport axios from \"axios\";\nfunction App() {\n  const [notes,setNotes] = useState([]); \n\n  useEffect(() => {\n    Axios.get('https://api.npoint.io/87c5bf40b4c2172aedd1')\n    .then(res =>setNotes(res.data.notes))\n  }, [])\n\n\n  return (\n    <div >\n      <Home notes={notes}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}